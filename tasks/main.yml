---
# tasks file for enqack.postgresql_server

- name: Gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Gather os specific tasks
  include_tasks: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Ensure PostgreSQL data directory exists
  file:
    path: "{{ postgresql_server_data_dir }}"
    owner: "{{ postgresql_server_user }}"
    group: "{{ postgresql_server_group }}"
    state: directory
    mode: 0700

- name: Check if PostgreSQL database is initialized
  stat:
    path: "{{ postgresql_server_data_dir }}/PG_VERSION"
  register: pgdata_dir_version
  become: true
  become_user: "{{ postgresql_server_user }}"

- name: Ensure PostgreSQL database is initialized
  command: "{{ postgresql_server_bin_path }}/initdb -D {{ postgresql_server_data_dir }}"
  when: not pgdata_dir_version.stat.exists
  become: true
  become_user: "{{ postgresql_server_user }}"

- name: Configure global settings
  lineinfile:
    dest: "{{ postgresql_server_config_path }}/postgresql.conf"
    regexp: "^#?{{ item.option }}.+$"
    line: "{{ item.option }} = '{{ item.value }}'"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_server_global_config_options }}"
  notify: restart postgresql

- name: Configure host based authentication
  template:
    src: "pg_hba.conf.j2"
    dest: "{{ postgresql_server_config_path }}/pg_hba.conf"
    owner: "{{ postgresql_server_user }}"
    group: "{{ postgresql_server_group }}"
    mode: 0600
  notify: restart postgresql
  when: postgresql_server_hba_entries | length > 0

- name: Ensure Postgresql unix socket dirs exist
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ postgresql_server_user }}"
    group: "{{ postgresql_server_group }}"
    mode: 02775
  with_items: "{{ postgresql_server_unix_socket_directories }}"

- name: Ensure PostgreSQL is started and enabled on boot
  service:
    name: "{{ postgresql_server_daemon }}"
    state: "{{ postgresql_server_service_state }}"
    enabled: "{{ postgresql_server_service_enabled }}"

- name: Ensure Postgresql users are present
  postgresql_user:
    name: "{{ item.name }}"
    password: "{{ item.password | default(omit) }}"
    encrypted: "{{ item.encrypted | default(omit) }}"
    priv: "{{ item.priv | default(omit) }}"
    role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
    db: "{{ item.db | default(omit) }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_server_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_server_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_server_users }}"
  no_log: true
  become: true
  become_user: "{{ postgresql_server_user }}"

- name: Ensure Postgresql databases are present
  postgresql_db:
    name: "{{ item.name }}"
    lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
    lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
    encoding: "{{ item.encoding | default('UTF-8') }}"
    template: "{{ item.template | default('template0') }}"
    login_host: "{{ item.login_host | default('localhost') }}"
    login_password: "{{ item.login_password | default(omit) }}"
    login_user: "{{ item.login_user | default(postgresql_server_user) }}"
    login_unix_socket: "{{ item.login_unix_socket | default(postgresql_server_unix_socket_directories[0]) }}"
    port: "{{ item.port | default(omit) }}"
    owner: "{{ item.owner | default(postgresql_server_user) }}"
    state: "{{ item.state | default('present') }}"
  with_items: "{{ postgresql_server_databases }}"
  become: true
  become_user: "{{ postgresql_server_user }}"
